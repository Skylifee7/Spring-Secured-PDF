/**
 * @author Skylifee7 on 20/07/2017.
 */
package com.gokcan.springboot;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


@Controller    // This means that this class is a Controller
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private RoleRepository roleRepository;

    @Autowired
    private UserService userService;

    @PostMapping(path = "/register") // Map ONLY POST Requests
    public ModelAndView registerUser(@RequestParam String username
            , @RequestParam String email, @RequestParam String password, @RequestParam Date date, @RequestParam String sex) {

        User n = new User();
        n.setUsername(username);
        n.setSex(sex);
        n.setEmail(email);
        n.setEnabled(true);
        n.setPassword(password);
        n.setDate(date);
        n.setEmail(email);
        userService.save(n);

        UserRole role = new UserRole(n, "ROLE_ADMIN");
        roleRepository.save(role);

        ModelAndView model = new ModelAndView();
        model.setViewName("login");
        return model;
    }

    @RequestMapping(value = "/download", method = RequestMethod.GET)
    public ModelAndView download() {
        Map<String, Object> model = new HashMap<>();
        List<User> users = userRepository.findAll();
        model.put("users", users);

        return new ModelAndView(new PDFView(), model);
    }

    @GetMapping(path = "/validate")
    public ResponseEntity validate(@RequestParam String username, HttpServletResponse res) throws IOException {

        if (userRepository.findByUsername(username) != null) {
            res.setStatus(400);
            return new ResponseEntity(HttpStatus.CONFLICT);
        }

        res.setStatus(200);
        return new ResponseEntity(HttpStatus.OK);
    }

    @GetMapping(path = "/users.json")
    public @ResponseBody
    Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
}